<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Check System</title>
    <!-- Use Tailwind CSS for modern styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <!-- Use Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
        .container-bg {
            background-image: url('https://placehold.co/1000x800/e5e7eb/6b7280?text=Student+Roster');
            background-size: cover;
            background-position: center;
        }
        .bg-glass {
            background-color: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex items-center justify-center p-4">
    <div id="loading-spinner" class="text-center">
        <div class="animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-indigo-500 mx-auto"></div>
        <p class="mt-4 text-lg text-gray-600">Loading...</p>
    </div>

    <div id="app" class="hidden w-full max-w-4xl mx-auto rounded-xl shadow-2xl bg-white overflow-hidden md:flex flex-col">
        <!-- Main Content Area -->
        <div class="flex-1 p-8 overflow-y-auto">
            <div class="text-center mb-6">
                <h1 class="text-4xl font-extrabold text-gray-800">Student Check System</h1>
                <p class="text-gray-500 mt-2 text-lg">Record and track checks for your students.</p>
            </div>

            <div id="user-info" class="mb-6 p-4 bg-gray-50 rounded-lg text-sm text-gray-600 border border-gray-200">
                <p>Your unique user ID (for sharing rosters): <span id="user-id" class="font-mono text-indigo-700 break-all"></span></p>
            </div>

            <!-- Add Student Section -->
            <div class="mb-8 p-6 bg-indigo-50 rounded-xl shadow-inner">
                <h2 class="text-2xl font-bold text-indigo-800 mb-4">Add a New Student</h2>
                <form id="add-student-form" class="flex flex-col md:flex-row gap-4">
                    <input type="text" id="student-name-input" placeholder="Student Name" required
                           class="flex-1 p-3 rounded-lg border-2 border-indigo-300 focus:outline-none focus:ring-2 focus:ring-indigo-500 transition-all">
                    <button type="submit"
                            class="bg-indigo-600 text-white font-semibold py-3 px-6 rounded-lg shadow-md hover:bg-indigo-700 transition-all transform hover:scale-105 active:scale-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Add Student
                    </button>
                </form>
            </div>

            <!-- Roster Section -->
            <div>
                <h2 class="text-2xl font-bold text-gray-800 mb-4">Student Roster</h2>
                <div id="student-roster" class="space-y-4">
                    <!-- Student list will be rendered here dynamically -->
                </div>
            </div>
        </div>
    </div>

    <script type="module">
        // Import Firebase modules
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, onSnapshot, addDoc, updateDoc, doc, deleteDoc, query, increment } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Global variables provided by the Canvas environment
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        // UI element references
        const loadingSpinner = document.getElementById('loading-spinner');
        const appContainer = document.getElementById('app');
        const userIdSpan = document.getElementById('user-id');
        const addStudentForm = document.getElementById('add-student-form');
        const studentNameInput = document.getElementById('student-name-input');
        const studentRosterContainer = document.getElementById('student-roster');

        // Initialize Firebase
        let db;
        let auth;
        let userId;

        // A flag to ensure we only start listening to the database once auth is ready
        let isAuthReady = false;

        // Main setup function to initialize Firebase and auth
        async function setupFirebase() {
            try {
                const firebaseApp = initializeApp(firebaseConfig);
                db = getFirestore(firebaseApp);
                auth = getAuth(firebaseApp);

                // Listen for authentication state changes
                onAuthStateChanged(auth, async (user) => {
                    if (user) {
                        // User is signed in.
                        userId = user.uid;
                        userIdSpan.textContent = userId;
                        isAuthReady = true;
                        loadingSpinner.classList.add('hidden');
                        appContainer.classList.remove('hidden');

                        // Now that we have the userId, start listening to the data
                        listenToRoster();
                    } else {
                        // User is signed out.
                        try {
                            if (initialAuthToken) {
                                // Use the provided custom token for sign-in
                                await signInWithCustomToken(auth, initialAuthToken);
                            } else {
                                // Fallback to anonymous sign-in if no token is provided
                                await signInAnonymously(auth);
                            }
                        } catch (error) {
                            console.error("Authentication failed:", error);
                        }
                    }
                });
            } catch (error) {
                console.error("Firebase initialization failed:", error);
                loadingSpinner.classList.add('hidden');
                // Use a modal or UI element instead of alert for better user experience
                // alert("Error: Failed to initialize the app. Check the console for details.");
            }
        }

        // Function to listen for real-time updates to the student roster
        function listenToRoster() {
            if (!isAuthReady || !userId) return;

            // Define the collection path based on the app ID and user ID
            const rosterCollectionPath = `artifacts/${appId}/users/${userId}/roster`;
            const q = query(collection(db, rosterCollectionPath));

            onSnapshot(q, (querySnapshot) => {
                studentRosterContainer.innerHTML = ''; // Clear the current roster display
                let students = [];
                querySnapshot.forEach((doc) => {
                    const student = {
                        id: doc.id,
                        ...doc.data()
                    };
                    students.push(student);
                });

                // Sort students alphabetically by name
                students.sort((a, b) => a.name.localeCompare(b.name));

                if (students.length === 0) {
                    studentRosterContainer.innerHTML = `
                        <p class="text-center text-gray-500 py-8">No students added yet. Add your first student above!</p>
                    `;
                } else {
                    students.forEach(student => {
                        const studentCard = createStudentCard(student);
                        studentRosterContainer.appendChild(studentCard);
                    });
                }
            }, (error) => {
                console.error("Error fetching student roster:", error);
                // In a real app, you might show a user-friendly error message here
            });
        }

        // Creates the HTML element for a single student
        function createStudentCard(student) {
            const card = document.createElement('div');
            card.className = 'flex items-center justify-between p-4 bg-white rounded-lg shadow-md border border-gray-200';
            card.innerHTML = `
                <div class="flex items-center flex-grow min-w-0">
                    <span class="font-semibold text-lg text-gray-800 truncate">${student.name}</span>
                </div>
                <div class="flex items-center gap-2">
                    <span class="text-2xl font-bold text-indigo-600 w-12 text-center">${student.checks}</span>
                    <div class="flex flex-col sm:flex-row gap-2">
                        <button class="add-check-btn bg-indigo-500 text-white p-2 rounded-lg shadow-sm hover:bg-indigo-600 transition-colors" data-id="${student.id}" aria-label="Add a check">
                            <i class="fas fa-plus"></i>
                        </button>
                        <button class="remove-check-btn bg-yellow-500 text-white p-2 rounded-lg shadow-sm hover:bg-yellow-600 transition-colors" data-id="${student.id}" aria-label="Remove a check">
                            <i class="fas fa-minus"></i>
                        </button>
                        <button class="delete-student-btn bg-red-500 text-white p-2 rounded-lg shadow-sm hover:bg-red-600 transition-colors" data-id="${student.id}" aria-label="Delete student">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    </div>
                </div>
            `;
            return card;
        }

        // Add event listener for the form submission
        addStudentForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            if (!isAuthReady || !userId) {
                console.error("Authentication not ready. Cannot add student.");
                return;
            }

            const studentName = studentNameInput.value.trim();
            if (studentName) {
                try {
                    const rosterCollectionPath = `artifacts/${appId}/users/${userId}/roster`;
                    await addDoc(collection(db, rosterCollectionPath), {
                        name: studentName,
                        checks: 0,
                    });
                    studentNameInput.value = ''; // Clear input field
                } catch (error) {
                    console.error("Error adding student:", error);
                }
            }
        });

        // Add event listener for the roster container to handle check buttons
        studentRosterContainer.addEventListener('click', async (e) => {
            if (!isAuthReady || !userId) {
                console.error("Authentication not ready. Cannot modify checks.");
                return;
            }

            const target = e.target.closest('button');
            if (!target) return;

            const studentId = target.dataset.id;
            const rosterDocRef = doc(db, `artifacts/${appId}/users/${userId}/roster`, studentId);

            try {
                if (target.classList.contains('add-check-btn')) {
                    await updateDoc(rosterDocRef, {
                        checks: increment(1)
                    });
                } else if (target.classList.contains('remove-check-btn')) {
                    const currentChecks = parseInt(target.closest('.flex.items-center.justify-between').querySelector('.text-2xl').textContent);
                    if (currentChecks > 0) {
                        await updateDoc(rosterDocRef, {
                            checks: increment(-1)
                        });
                    }
                } else if (target.classList.contains('delete-student-btn')) {
                    // In a real app, you might show a confirmation dialog here
                    await deleteDoc(rosterDocRef);
                }
            } catch (error) {
                console.error("Error updating student data:", error);
            }
        });

        // Run the setup function when the script loads
        window.onload = setupFirebase;
    </script>
</body>
</html>


