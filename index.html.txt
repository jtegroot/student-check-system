<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Check Tracker</title>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
        .container {
            max-width: 800px;
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen p-4">

    <div class="container bg-white p-6 rounded-3xl shadow-lg border border-gray-200 w-full md:w-3/4 lg:w-2/3">

        <!-- Header -->
        <header class="mb-6 border-b pb-4">
            <h1 class="text-3xl font-bold text-center text-gray-800">Student Check System</h1>
            <p class="text-sm text-center text-gray-500 mt-2">This version saves data in your browser's local storage.</p>
        </header>

        <!-- Main Content (no loading state needed) -->
        <div id="mainContent">
            <div class="mb-6 flex flex-col md:flex-row items-center space-y-4 md:space-y-0 md:space-x-4">
                <input id="newStudentName" type="text" placeholder="Enter student's name" class="flex-grow p-3 rounded-xl border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition duration-200 shadow-sm">
                <button id="addStudentBtn" class="bg-blue-600 text-white font-semibold py-3 px-6 rounded-xl hover:bg-blue-700 transition duration-300 ease-in-out shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 w-full md:w-auto">Add Student</button>
            </div>
            
            <!-- Student List -->
            <ul id="studentList" class="space-y-4">
                <!-- Students will be rendered here dynamically -->
            </ul>
        </div>

        <!-- Notification Message Box -->
        <div id="notificationBox" class="fixed inset-x-0 top-4 z-50 flex items-center justify-center hidden">
            <div class="bg-gray-800 text-white px-6 py-3 rounded-full shadow-xl transition-all duration-300 transform scale-95 opacity-0">
                <p id="notificationMessage"></p>
            </div>
        </div>

    </div>

    <script type="text/javascript">
        // Helper function to display a temporary notification message.
        const showNotification = (message) => {
            const box = document.getElementById('notificationBox');
            const msg = document.getElementById('notificationMessage');
            msg.textContent = message;
            box.classList.remove('hidden');
            box.querySelector('div').classList.remove('scale-95', 'opacity-0');
            box.querySelector('div').classList.add('scale-100', 'opacity-100');

            setTimeout(() => {
                box.querySelector('div').classList.remove('scale-100', 'opacity-100');
                box.querySelector('div').classList.add('scale-95', 'opacity-0');
                setTimeout(() => box.classList.add('hidden'), 300);
            }, 2000);
        };

        // Key for local storage to prevent conflicts with other apps.
        const STORAGE_KEY = 'student_check_system_students';

        // --- Data Management Functions (using Local Storage) ---

        /**
         * Loads students from local storage.
         * @returns {Array} An array of student objects.
         */
        const loadStudents = () => {
            const students = localStorage.getItem(STORAGE_KEY);
            return students ? JSON.parse(students) : [];
        };

        /**
         * Saves the students array to local storage.
         * @param {Array} students An array of student objects.
         */
        const saveStudents = (students) => {
            localStorage.setItem(STORAGE_KEY, JSON.stringify(students));
        };

        /**
         * Renders the students from local storage to the UI.
         */
        const renderStudents = () => {
            const students = loadStudents();
            const studentList = document.getElementById('studentList');
            studentList.innerHTML = ''; // Clear the current list
            
            students.sort((a, b) => a.name.localeCompare(b.name)); // Sort students alphabetically

            students.forEach((student, index) => {
                const li = document.createElement('li');
                li.className = 'flex items-center justify-between bg-gray-50 p-4 rounded-xl shadow-sm border border-gray-200';
                li.innerHTML = `
                    <div class="flex-grow flex items-center space-x-4">
                        <span class="font-medium text-gray-800 text-lg">${student.name}</span>
                        <span class="text-xl font-bold text-blue-600">${student.checks}</span>
                    </div>
                    <div class="flex space-x-2 ml-4">
                        <button class="give-check-btn bg-blue-500 text-white py-2 px-4 rounded-full font-semibold text-sm hover:bg-blue-600 transition duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                            Give Check
                        </button>
                        <button class="reset-check-btn bg-red-500 text-white py-2 px-4 rounded-full font-semibold text-sm hover:bg-red-600 transition duration-300 ease-in-out focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2">
                            Reset
                        </button>
                    </div>
                `;
                // Add click listeners to the buttons for each student
                li.querySelector('.give-check-btn').addEventListener('click', () => giveCheck(index));
                li.querySelector('.reset-check-btn').addEventListener('click', () => resetChecks(index));
                studentList.appendChild(li);
            });
        };

        /**
         * Adds a new student to the local storage.
         * @param {string} name The name of the new student.
         */
        const addStudent = (name) => {
            if (!name.trim()) {
                showNotification("Student name cannot be empty.");
                return;
            }
            let students = loadStudents();
            // Check for duplicates
            if (students.some(student => student.name.toLowerCase() === name.trim().toLowerCase())) {
                showNotification("A student with this name already exists.");
                return;
            }

            const newStudent = { name: name.trim(), checks: 0 };
            students.push(newStudent);
            saveStudents(students);
            document.getElementById('newStudentName').value = '';
            showNotification("Student added successfully!");
            renderStudents(); // Re-render the list
        };

        /**
         * Increments the check count for a student in local storage.
         * @param {number} index The index of the student in the array.
         */
        const giveCheck = (index) => {
            const students = loadStudents();
            students[index].checks += 1;
            saveStudents(students);
            showNotification("Check added!");
            renderStudents(); // Re-render the list
        };

        /**
         * Resets the check count for a student to zero in local storage.
         * @param {number} index The index of the student in the array.
         */
        const resetChecks = (index) => {
            const students = loadStudents();
            students[index].checks = 0;
            saveStudents(students);
            showNotification("Checks reset!");
            renderStudents(); // Re-render the list
        };

        // --- Event Listeners and Initial Load ---
        document.getElementById('addStudentBtn').addEventListener('click', () => {
            const name = document.getElementById('newStudentName').value;
            addStudent(name);
        });

        document.getElementById('newStudentName').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const name = document.getElementById('newStudentName').value;
                addStudent(name);
            }
        });

        // Initial render when the page loads
        document.addEventListener('DOMContentLoaded', renderStudents);
    </script>
</body>
</html>

</html>


